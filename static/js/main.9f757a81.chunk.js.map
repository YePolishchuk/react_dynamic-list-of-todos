{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/SortBy.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","setVisibleModal","setSelectedTodo","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","query","setQuery","sortBy","setSortBy","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortBy","TodoModal","useState","user","setUser","useEffect","userId","currentUser","href","email","name","App","setTodos","loader","setLoader","visibleModal","All","selectedTodos","sortType","sortedTodos","trim","filter","toLocaleLowerCase","includes","Active","Completed","sortTodosBy","currentTodos","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f757a81.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setVisibleModal: (value: boolean) => void,\n  setSelectedTodo: (value: Todo) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setVisibleModal,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map((todo) => (\n        <tr\n          data-cy=\"todo\"\n          className={cn(\n            { 'has-background-info-light': selectedTodo?.id === todo.id },\n          )}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={cn(\n              {\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              },\n            )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                setVisibleModal(true);\n                setSelectedTodo(todo);\n              }}\n            >\n              <span className=\"icon\">\n                <i className={cn('far',\n                  {\n                    'fa-eye-slash': selectedTodo?.id === todo.id,\n                    'fa-eye': selectedTodo?.id !== todo.id,\n                  })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { SortBy } from '../../types/SortBy';\n\ninterface Props {\n  query: string,\n  setQuery: (v: string) => void,\n  sortBy: SortBy,\n  setSortBy: (v: SortBy) => void,\n}\n\nexport const TodoFilter:React.FC<Props> = ({\n  query,\n  setQuery,\n  sortBy,\n  setSortBy,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={sortBy}\n          onChange={event => {\n            setSortBy(event.target.value as SortBy);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => {\n          setQuery(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo | null,\n  setSelectedTodo: (v: Todo | null) => void,\n  setVisibleModal: (v: boolean) => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n  setVisibleModal,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then((currentUser) => setUser(currentUser));\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setSelectedTodo(null);\n                setVisibleModal(false);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SortBy } from './types/SortBy';\n\nconst sortTodosBy = (\n  todos: Todo[],\n  query: string,\n  sortType: SortBy,\n) => {\n  let sortedTodos = [...todos];\n\n  if (query.trim()) {\n    sortedTodos = (todos.filter(\n      todo => todo.title.toLocaleLowerCase()\n        .includes(query.trim().toLocaleLowerCase()),\n    ));\n  }\n\n  switch (sortType) {\n    case SortBy.Active:\n      sortedTodos = sortedTodos.filter(todo => !todo.completed);\n      break;\n    case SortBy.Completed:\n      sortedTodos = sortedTodos.filter(todo => todo.completed);\n      break;\n    case SortBy.All:\n    default:\n      break;\n  }\n\n  return sortedTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loader, setLoader] = useState(false);\n  const [visibleModal, setVisibleModal] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [sortBy, setSortBy] = useState(SortBy.All);\n\n  const selectedTodos = sortTodosBy(todos, query, sortBy);\n\n  useEffect(() => {\n    setLoader(true);\n\n    getTodos()\n      .then((currentTodos) => setTodos(currentTodos))\n      .finally(() => setLoader(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                sortBy={sortBy}\n                setSortBy={setSortBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loader\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={selectedTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                    setVisibleModal={setVisibleModal}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {visibleModal && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n          setVisibleModal={setVisibleModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}